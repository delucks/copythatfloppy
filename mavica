#!/usr/bin/env python3
# the "mavica" script copies all the photos off a Mavica camera, elegantly
#
# version 0.2: filenames are now formatted to be unique from each other, with the date and floppy number
# version 0.1: shell script translated to python: mounts/unmounts a block device and copies pictures to the current directory
#
# this source is formatted using `black -S -l 120`
#
# TODO:
# - Add date detection based on the files' modification dates. Configure or assume a timezone, format each filename according to this date
# - Looks like the file modification date/time on the files coming off the floppy is accurate to the internal clock
#   each file has the time of the camera's internal clock as the write time, without a timezone written (my computer assumes it's UTC as a result)
#   we could have the timezone in configuration so we can write back the metadata with the timezone set
# - Add standard JPG metadata into these files, including timestamps based on the date detection
#   exiftool -Make=Sony
#   exiftool -CameraModel=FD-7

import sys

if sys.version_info < (3, 10):
    sys.stderr.write("Python 3.10 or newer is required.\n")
    sys.exit(1)

import argparse
import glob
import os
import re
import readline
import shlex
import shutil
import subprocess
from contextlib import contextmanager
from datetime import datetime
from typing import Generator

### CONFIGURATION ###
# Prefix of the filename component including the floppy number. By default, filenames look like this:
#   2024-08-21_floppy1_MVC-009F.JPG
# Changing this to "f" would produce filenames like:
#   2024-08-21_f1_MVC-009F.JPG
FLOPPY_NUMBER_PFX = 'floppy'


def errexit(*args, **kwargs) -> None:
    print(*args, file=sys.stderr, **kwargs)
    sys.exit(1)


def run(command: str, dry_run: bool = False) -> subprocess.CompletedProcess:
    '''run a string command through subprocess, echo'ing the command to be executed when dry_run = True'''
    command_fragments = shlex.split(command)
    if dry_run:
        command_fragments.insert(0, 'echo')
    return subprocess.run(command_fragments)


def valid_date(date: str) -> bool:
    return re.match('[0-9]{4}-[0-9]{2}-[0-9]{2}', date)


def prompt_for_date() -> str:
    default_date = '{:%Y-%m-%d}'.format(datetime.now())
    result = ''
    while result == '':
        try:
            new_date = input(f'What date were these pictures taken? Default is {default_date}: ')
            if new_date.strip() == '':
                print('Using default...')
                result = default_date
            else:
                if valid_date(new_date):
                    result = new_date
                else:
                    print('Must be in the format YYYY-MM-DD')
        except KeyboardInterrupt:
            print('\nUsing default...')
            result = default_date
    return result


def copy_files_from(
    source_dir: str, dest_dir: str, date_string: str, floppyno: int = -1, dry_run: bool = False
) -> None:
    '''copy all the files from source_dir to dest_dir, or echo the files to be copied when dry_run = True'''
    files = glob.iglob(os.path.join(source_dir, "*.JPG"))
    for file in files:
        if os.path.isfile(file):
            # Assemble destination filename
            floppy_spec = ''
            if floppyno is not None and floppyno > 0:
                floppy_spec = f'{FLOPPY_NUMBER_PFX}{floppyno}_'
            dest_file = '{}_{}{}'.format(date_string, floppy_spec, os.path.basename(file))
            destination = os.path.join(dest_dir, dest_file)
            if dry_run:
                print(f'would copy {file} to {destination}')
            else:
                shutil.copy2(file, destination)


@contextmanager
def mounted_block_device(drive: str, mountpoint: str, dry_run: bool) -> Generator[None, None, None]:
    # string interpolating into a root-level command because it's fun to enjoy life
    try:
        run(f'sudo mount {drive} {mountpoint}', dry_run)
        yield
    finally:
        run(f'sudo umount {mountpoint}', dry_run)


if __name__ == '__main__':
    p = argparse.ArgumentParser('mavica')
    p.add_argument('drive', default='/dev/sdc', help='path to the block device for the floppy drive')
    p.add_argument(
        '--dry-run', action='store_true', default=False, help='write what actions will be performed to stdout'
    )
    p.add_argument('--destination', default='.', help='the directory where your JPGs should end up', metavar='PATH')
    p.add_argument(
        '--mountpoint',
        default='/mnt/tmp',
        help='path to the mountpoint where the floppies should be mounted',
        metavar='PATH',
    )
    p.add_argument(
        '-d',
        '--date',
        default='{:%Y-%m-%d}'.format(datetime.now()),
        help='the date these images were taken in YYYY-MM-DD format',
    )
    p.add_argument(
        '-n',
        '--floppyno',
        type=int,
        help='when copying multiple floppies, the number to store in the filenames of the resulting files',
        metavar='NUM',
    )
    args = p.parse_args()

    # resolve necessary variables from configuration, args, or prompt
    # environment variables take the highest precedence, then CLI arguments, then prompting the user
    date_string = os.getenv('MVC_DATE', args.date)
    if not valid_date(date_string):
        errexit('Date must be in the format YYYY-MM-DD')
    mountpoint = os.getenv('MVC_MOUNTPOINT', args.mountpoint)
    if mountpoint == '/':
        errexit('The mountpoint cannot be the root of your filesystem')
    floppynum = os.getenv('MVC_FLOPPYNO', args.floppyno)
    destination = os.getenv('MVC_DSTPATH', args.destination)
    if not os.path.isdir(destination):
        errexit('Destination path must exist!')

    # Mount the floppy and start the copy process
    with mounted_block_device(args.drive, mountpoint, args.dry_run):
        copy_files_from(mountpoint, destination, date_string, floppynum, args.dry_run)
